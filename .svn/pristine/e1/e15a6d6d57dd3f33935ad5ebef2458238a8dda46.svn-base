package com.honhai.foxconn.fxccalendar.elsemember.PopupWindow;

import android.content.Context;
import android.content.ContextWrapper;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.support.v7.app.AppCompatActivity;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.content.SharedPreferences;
import android.widget.Toast;

import com.honhai.foxconn.fxccalendar.R;
import com.honhai.foxconn.fxccalendar.data.Data;

import static com.honhai.foxconn.fxccalendar.main.MainActivity.SP_THEME;
import static com.honhai.foxconn.fxccalendar.main.MainActivity.SP_THEME_COLOR;

public class ColorPickerPopupWindow {
    private ColorPicker colorPicker;
    private TextView confirm;
    private TextView cancel;
    private boolean isTouchOuSide = true;

    //public static final String SP_THEME = "Theme";
    //public static final String SP_THEME_COLOR = "ThemeColor";


    private OnConfirmListener onConfirmListener;
    private OnCancelListener onCancelListener;

    public ColorPickerPopupWindow(final AppCompatActivity context) {
        View popupLayout = context.getLayoutInflater().inflate(R.layout.popup_window_color_picker_layout, (ViewGroup) context.findViewById(R.id.colorPickerLayout));
        final PopupWindow popupWindow = new PopupWindow(popupLayout, context.getWindow().getDecorView().getWidth() - 100, context.getWindow().getDecorView().getHeight() * 3 / 5);
        popupWindow.setFocusable(true);
        popupWindow.setOutsideTouchable(true);


        colorPicker = popupLayout.findViewById(R.id.colorPicker);
        confirm = popupLayout.findViewById(R.id.colorPickerConfirm);
        cancel = popupLayout.findViewById(R.id.colorPickerCancel);
        confirm.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (onConfirmListener != null)
                    onConfirmListener.onConfirm();
                isTouchOuSide = true;
                popupWindow.dismiss();

            }
        });
        cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (onCancelListener != null) {
                    onCancelListener.onCancel();
                }
                isTouchOuSide = true;
                popupWindow.dismiss();
            }
        });
        WindowManager.LayoutParams lp = context.getWindow().getAttributes();
        lp.alpha = .5f;
        context.getWindow().setAttributes(lp);
        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                WindowManager.LayoutParams lp = context.getWindow().getAttributes();
                lp.alpha = 1f;
                context.getWindow().setAttributes(lp);
                if (isTouchOuSide && onCancelListener != null)
                    onCancelListener.onCancel();
            }
        });
        popupWindow.showAtLocation(context.getWindow().getDecorView(), Gravity.CENTER, 0, 0);
    }

    public void setOnColorChoosingListener(ColorPicker.OnColorChoosingListener listener) {
        colorPicker.setOnColorChoosingListener(listener);
    }

    public void setOnColorChoseListener(ColorPicker.OnColorChoseListener listener) {
        colorPicker.setOnColorChoseListener(listener);
    }

    public void setOnConfirmListener(OnConfirmListener listener) {
        onConfirmListener = listener;
    }

    public void setOnCancelListener(OnCancelListener listener) {
        onCancelListener = listener;
    }

    public interface OnConfirmListener {
        void onConfirm();
    }

    public interface OnCancelListener {
        void onCancel();
    }
}
