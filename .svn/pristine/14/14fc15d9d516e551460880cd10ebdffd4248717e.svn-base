package com.honhai.foxconn.fxccalendar.login;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Paint;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.text.TextWatcher;
import android.view.MotionEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Toast;

import static android.view.View.OnClickListener;

import android.text.Editable;
import android.text.method.HideReturnsTransformationMethod;
import android.text.method.PasswordTransformationMethod;
import android.preference.PreferenceManager;

import com.honhai.foxconn.fxccalendar.R;
import com.honhai.foxconn.fxccalendar.data.Data;
import com.honhai.foxconn.fxccalendar.data.User;
import com.honhai.foxconn.fxccalendar.main.MainActivity;

import java.util.ArrayList;

public class Register extends AppCompatActivity {

    private Toast mToast = null;

    private Button bt_register;
    private Button bt_button1;
    private Button bt_fPwd;
    private EditText et_pwd = null;
    private EditText et_name = null;
    private CheckBox cb_ischeck;
    private Button pwd_clear;
    private Button pwd_eye;
    private Button name_clear;
    private boolean isOpen = false;
    private SharedPreferences pref;
    private SharedPreferences.Editor editor;
    Data data;
    boolean isLogin;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.register_login_ui_layout);
        data = Data.getInstance();
        //初始化实例
        pref = PreferenceManager.getDefaultSharedPreferences(this);
        et_name = (EditText) findViewById(R.id.et_userName);
        et_pwd = (EditText) findViewById(R.id.et_passWord);
        bt_fPwd = (Button) findViewById(R.id.bt_forgetPassword);
        bt_button1 = (Button) findViewById(R.id.bt_button);
        bt_register = (Button) findViewById(R.id.bt_register);
        cb_ischeck = (CheckBox) findViewById(R.id.cb_ischeck);
        pwd_clear = (Button) findViewById(R.id.bt_pwd_clear);
        pwd_eye = (Button) findViewById(R.id.bt_pwd_eye);
        name_clear = (Button) findViewById(R.id.bt_name_clear);
        boolean isRemenber = pref.getBoolean("remember_password", false);
        if (isRemenber) {
            //将账号和密码都设置到文本中
            String account = pref.getString("account", "");
            String password = pref.getString("password", "");
            et_name.setText(account);
            et_pwd.setText(password);
            cb_ischeck.setChecked(true);
        }
        //底部添加横线
        bt_fPwd.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);

        //判断清除文本框里面的内容
        et_name.addTextChangedListener(new TextWatcher() { // 监听文本框内容变化
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {// 获得文本框中的用户
                String user = et_name.getText().toString().trim();
                if ("".equals(user)) {// 用户名为空,设置按钮不可见
                    name_clear.setVisibility(View.INVISIBLE);
                } else {            // 用户名不为空，设置按钮可见
                    name_clear.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });
        et_pwd.addTextChangedListener(new TextWatcher() {
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {    // 获得文本框中的用户密码
                String pwd = et_pwd.getText().toString().trim();
                if ("".equals(pwd)) {    // 用户名为空,设置按钮不可见
                    pwd_clear.setVisibility(View.INVISIBLE);
                } else {             // 用户名不为空，设置按钮可见
                    pwd_clear.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });

        bt_register.setOnClickListener(m_register_Listener);
        bt_fPwd.setOnClickListener(m_register_Listener);
        bt_button1.setOnClickListener(m_register_Listener);
        pwd_clear.setOnClickListener(m_register_Listener);
        pwd_eye.setOnClickListener(m_register_Listener);
        name_clear.setOnClickListener(m_register_Listener);
    }

    OnClickListener m_register_Listener = new OnClickListener() {
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.bt_button:
                    register_button();
                    break;
                case R.id.bt_forgetPassword:
                    Intent i = new Intent(Register.this, Resetpassword.class);
                    startActivity(i);
                    break;
                case R.id.bt_register:
                    Intent i1 = new Intent(Register.this, Registernumber.class);
                    startActivity(i1);
                    break;
                case R.id.bt_name_clear:
                    // 清除登录名
                    et_name.setText("");
                    break;
                case R.id.bt_pwd_clear:
                    et_pwd.setText("");
                    break;
                case R.id.bt_pwd_eye:
                    if (isOpen) { // 密码可见与不可见的切换
                        isOpen = false;
                    } else {
                        isOpen = true;
                    }      // 默认isOpen是false,密码不可见
                    changePwdOpenOrClose(isOpen);
                    break;
                default:
            }
        }

    };

    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        View v = getCurrentFocus();
        if (isShouldHideInput(v, ev)) {
            InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
            if (imm != null) {
                imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
            }
        }
        return super.dispatchTouchEvent(ev);
    }

    private boolean isShouldHideInput(View v, MotionEvent event) {
        if (v instanceof EditText) {
            int[] leftTop = {0, 0};
            v.getLocationInWindow(leftTop);
            int left = leftTop[0];
            int top = leftTop[1];
            int bottom = top + v.getHeight();
            int right = left + v.getWidth();
            return !(event.getX() > left) || !(event.getX() < right)
                    || !(event.getY() > top) || !(event.getY() < bottom);
        }
        return false;
    }

    private void changePwdOpenOrClose(boolean flag) {
        if (flag) {   // 第一次过来是false，密码不可见
            pwd_eye.setBackgroundResource(R.drawable.ic_visibility_black_24dp);// 密码可见
            et_pwd.setTransformationMethod(HideReturnsTransformationMethod.getInstance());// 设置EditText的密码可见
        } else {   // 密码不可见
            pwd_eye.setBackgroundResource(R.drawable.ic_visibility_off_black_24dp);
            et_pwd.setTransformationMethod(PasswordTransformationMethod.getInstance()); // 设置EditText的密码隐藏
        }
    }

    private User muser;

    private void register_button() {
        String name = et_name.getText().toString().trim();
        String pwd = et_pwd.getText().toString().trim();
        if (isUserNameAndPwd()) {
            isLogin = false;
            ArrayList<User> myal = data.getUsers();
            for (int i = 0; i < myal.size(); i++) {
                String WorkId = data.getUsers().get(i).getWorkId();
                String password = data.getUsers().get(i).getPassword();
                if (et_name.getText().toString().equals(WorkId) && et_pwd.getText().toString().equals(password)) {
                    editor = pref.edit();
                    if (cb_ischeck.isChecked()) {
                        editor.putBoolean("remember_password", true);
                        editor.putString("account", name);
                        editor.putString("password", pwd);
                    } else {
                        editor.clear();
                    }
                    editor.apply();
                    muser = data.getUsers().get(i);
                    isLogin = true;
                }
            }
            addUser(isLogin);
        }
    }

    private void addUser(boolean isLogin) {
        if (isLogin) {
            Intent intent = new Intent(Register.this, MainActivity.class);
            startActivity(intent);
            Data.setUserInfo(muser);
            finish();
        } else {
            showToast(getString(R.string.WrongAccount));
        }
    }

    public void showToast(String msg) {

        if (mToast == null) {
            mToast = Toast.makeText(this, msg, Toast.LENGTH_SHORT);
        } else {
            mToast.setText(msg);
            mToast.setDuration(Toast.LENGTH_SHORT);
        }

        mToast.show();
    }


    private boolean isUserNameAndPwd() {
        if (et_name.getText().toString().trim().equals("")) {
            Toast.makeText(this, getString(R.string.account_empty),
                    Toast.LENGTH_SHORT).show();
            return false;
        } else if (et_pwd.getText().toString().equals("")) {
            Toast.makeText(this, getString(R.string.pwd_empty),
                    Toast.LENGTH_SHORT).show();
            return false;
        }
        return true;
    }

}


