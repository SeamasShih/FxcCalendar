package com.honhai.foxconn.fxccalendar.main;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.res.ColorStateList;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.BottomNavigationView;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Gravity;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.honhai.foxconn.fxccalendar.R;
import com.honhai.foxconn.fxccalendar.data.Data;
import com.honhai.foxconn.fxccalendar.weekly.layout.CalendarWeeklyFragment;

public class MainActivity extends AppCompatActivity {

    private FrameLayout frameLayout;
    private CalendarWeeklyFragment weeklyFragment;
    private BottomNavigationBar bottomBar;
    private ImageView btnAddEvent;
    private int calendarType = CALENDAR_WEEKLY;

    private static final int CALENDAR_SUMMARY = 0;
    private static final int CALENDAR_WEEKLY = 1;
    private static final int CALENDAR_MONTHLY = 2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        findViews();
        setFragment();
        setBottomBar();
    }

    @SuppressLint("ClickableViewAccessibility")
    private void setBottomBar() {
        bottomBar.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
                bottomBar.moveLabelBar(menuItem.getOrder());
                return true;
            }
        });
        bottomBar.setOnNavigationItemClickListener(new BottomNavigationBar.OnNavigationItemClickListener() {
            @Override
            public boolean onNavigationItemClickListener(MotionEvent ev) {
                switch (bottomBar.getPressItem(ev)) {
                    case 0:
                        weeklyFragment.rollback();
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                }
                return true;
            }
        });
        bottomBar.setOnNavigationItemLongClickListener(new BottomNavigationBar.OnNavigationItemLongClickListener() {
            @Override
            public void onNavigationItemLongClickListener(MotionEvent ev) {
                switch (bottomBar.getPressItem(ev)) {
                    case 0:
                        showPopupSwitchCalendarView();
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                }
            }
        });
        setBottomMenuCalendarType(calendarType);
    }

    private void showPopupSwitchCalendarView() {
        View popupLayout = getLayoutInflater().inflate(R.layout.popup_window_select_calendar_layout, (ViewGroup) findViewById(R.id.main_layout));
        PopupWindow popupWindow = new PopupWindow(popupLayout, getWindow().getDecorView().getWidth(), getWindow().getDecorView().getHeight() / 2);
        popupWindow.setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.colorDefaultBackground)));
        popupWindow.setOutsideTouchable(true);
        popupWindow.setFocusable(true);
        popupWindow.showAsDropDown(bottomBar, 0, 0);
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.alpha = .5f;
        getWindow().setAttributes(lp);
        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                WindowManager.LayoutParams lp = getWindow().getAttributes();
                lp.alpha = 1f;
                getWindow().setAttributes(lp);
            }
        });
        setPopupCalendarListType(popupLayout, calendarType);
        setPopupCalendarListListener(popupLayout, calendarType);
    }

    private void setPopupCalendarListListener(View layout, int calendarType) {
        PopupCalendarImageView summary = layout.findViewById(R.id.imgPupSwitchCalendarSummary);
        PopupCalendarImageView weekly = layout.findViewById(R.id.imgPupSwitchCalendarWeekly);
        PopupCalendarImageView monthly = layout.findViewById(R.id.imgPupSwitchCalendarMonthly);
        ImageView summaryConfirm = layout.findViewById(R.id.imgPupSwitchCalendarSummaryConfirm);
        ImageView weeklyConfirm = layout.findViewById(R.id.imgPupSwitchCalendarWeeklyConfirm);
        ImageView monthlyConfirm = layout.findViewById(R.id.imgPupSwitchCalendarMonthlyConfirm);
        TextView summaryText = layout.findViewById(R.id.tvPupSwitchCalendarSummary);
        TextView weeklyText = layout.findViewById(R.id.tvPupSwitchCalendarWeekly);
        TextView monthlyText = layout.findViewById(R.id.tvPupSwitchCalendarMonthly);
        switch (calendarType) {
            case CALENDAR_MONTHLY:
                monthly.setBackground(getDrawable(R.drawable.drawable_list_monthly_selected));
                monthly.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                monthly.setScaleX(.8f);
                monthly.setScaleY(.8f);
                monthlyText.setTextColor(Data.getInstance().getThemeColor());
                monthlyConfirm.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                weekly.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                weekly.setScaleX(.8f);
                weekly.setScaleY(.8f);
                summary.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                summary.setScaleX(.8f);
                summary.setScaleY(.8f);

                weeklyConfirm.setVisibility(View.INVISIBLE);
                summaryConfirm.setVisibility(View.INVISIBLE);
                return;
            case CALENDAR_WEEKLY:
                monthly.setBackground(getDrawable(R.drawable.drawable_list_monthly_free));
                monthly.setScaleX(.8f);
                monthly.setScaleY(.8f);
                weekly.setBackground(getDrawable(R.drawable.drawable_list_weekly_selected));
                weekly.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                weekly.setScaleX(.8f);
                weekly.setScaleY(.8f);
                weeklyText.setTextColor(Data.getInstance().getThemeColor());
                weeklyConfirm.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                summary.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                summary.setScaleX(.8f);
                summary.setScaleY(.8f);

                monthlyConfirm.setVisibility(View.INVISIBLE);
                summaryConfirm.setVisibility(View.INVISIBLE);
                return;
            case CALENDAR_SUMMARY:
                monthly.setBackground(getDrawable(R.drawable.drawable_list_monthly_free));
                monthly.setScaleX(.8f);
                monthly.setScaleY(.8f);
                weekly.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                weekly.setScaleX(.8f);
                weekly.setScaleY(.8f);
                summary.setBackground(getDrawable(R.drawable.drawable_list_weekly_selected));
                summary.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                summary.setScaleX(.8f);
                summary.setScaleY(.8f);
                summaryText.setTextColor(Data.getInstance().getThemeColor());
                summaryConfirm.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));

                monthlyConfirm.setVisibility(View.INVISIBLE);
                weeklyConfirm.setVisibility(View.INVISIBLE);
                return;
        }
    }

    private void setPopupCalendarListType(View layout, int type) {
        PopupCalendarImageView summary = layout.findViewById(R.id.imgPupSwitchCalendarSummary);
        PopupCalendarImageView weekly = layout.findViewById(R.id.imgPupSwitchCalendarWeekly);
        PopupCalendarImageView monthly = layout.findViewById(R.id.imgPupSwitchCalendarMonthly);
        ImageView summaryConfirm = layout.findViewById(R.id.imgPupSwitchCalendarSummaryConfirm);
        ImageView weeklyConfirm = layout.findViewById(R.id.imgPupSwitchCalendarWeeklyConfirm);
        ImageView monthlyConfirm = layout.findViewById(R.id.imgPupSwitchCalendarMonthlyConfirm);
        switch (type) {
            case CALENDAR_MONTHLY:
                monthly.setBackground(getDrawable(R.drawable.drawable_list_monthly_selected));
                monthly.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                monthly.setScaleX(.8f);
                monthly.setScaleY(.8f);
                weekly.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                weekly.setScaleX(.8f);
                weekly.setScaleY(.8f);
                summary.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                summary.setScaleX(.8f);
                summary.setScaleY(.8f);
                weeklyConfirm.setVisibility(View.INVISIBLE);
                summaryConfirm.setVisibility(View.INVISIBLE);
                monthly.setClickable(true);
                return;
            case CALENDAR_WEEKLY:
                monthly.setBackground(getDrawable(R.drawable.drawable_list_monthly_free));
                monthly.setScaleX(.8f);
                monthly.setScaleY(.8f);
                weekly.setBackground(getDrawable(R.drawable.drawable_list_weekly_selected));
                weekly.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                weekly.setScaleX(.8f);
                weekly.setScaleY(.8f);
                summary.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                summary.setScaleX(.8f);
                summary.setScaleY(.8f);
                monthlyConfirm.setVisibility(View.INVISIBLE);
                summaryConfirm.setVisibility(View.INVISIBLE);
                return;
            case CALENDAR_SUMMARY:
                monthly.setBackground(getDrawable(R.drawable.drawable_list_monthly_free));
                monthly.setScaleX(.8f);
                monthly.setScaleY(.8f);
                weekly.setBackground(getDrawable(R.drawable.drawable_list_weekly_free));
                weekly.setScaleX(.8f);
                weekly.setScaleY(.8f);
                summary.setBackground(getDrawable(R.drawable.drawable_list_weekly_selected));
                summary.setBackgroundTintList(ColorStateList.valueOf(Data.getInstance().getThemeColor()));
                summary.setScaleX(.8f);
                summary.setScaleY(.8f);
                monthlyConfirm.setVisibility(View.INVISIBLE);
                weeklyConfirm.setVisibility(View.INVISIBLE);
                return;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        setBottomMenuItemStateColor();
    }

    private void setBottomMenuCalendarType(int type) {
        switch (type) {
            case CALENDAR_MONTHLY:
                bottomBar.getMenu().getItem(0).setIcon(R.drawable.drawable_bottom_calendar_monthly);
                bottomBar.getMenu().getItem(0).setTitle(R.string.calendar_monthly);
                return;
            case CALENDAR_WEEKLY:
                bottomBar.getMenu().getItem(0).setIcon(R.drawable.drawable_bottom_calendar_weekly);
                bottomBar.getMenu().getItem(0).setTitle(R.string.calendar_weekly);
                return;
            case CALENDAR_SUMMARY:
                bottomBar.getMenu().getItem(0).setIcon(R.drawable.drawable_bottom_calendar_summary);
                bottomBar.getMenu().getItem(0).setTitle(R.string.calendar_summary);
                return;
        }
    }

    private void setBottomMenuItemStateColor() {
        bottomBar.setItemIconTintList(createColorStateList(Data.getInstance().getThemeColor(), getResources().getColor(R.color.colorBottomMenuDefault)));
        bottomBar.setItemTextColor(createColorStateList(Data.getInstance().getThemeColor(), getResources().getColor(R.color.colorBottomMenuDefault)));
    }

    private ColorStateList createColorStateList(int select, int normal) {
        int[] colors = new int[]{select, normal};
        int[][] states = new int[2][];
        states[0] = new int[]{android.R.attr.state_selected};
        states[1] = new int[]{};
        return new ColorStateList(states, colors);
    }

    private void setFragment() {
        weeklyFragment = new CalendarWeeklyFragment();
        getSupportFragmentManager().beginTransaction().replace(R.id.frame, weeklyFragment).commit();
    }

    private void findViews() {
        frameLayout = findViewById(R.id.frame);
        bottomBar = findViewById(R.id.bottomBar);
        btnAddEvent = findViewById(R.id.btnAddEvent);
    }
}
