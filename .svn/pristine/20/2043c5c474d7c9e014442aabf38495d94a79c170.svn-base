package com.honhai.foxconn.fxccalendar.addevent;

import android.content.Context;
import android.content.SharedPreferences;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Adapter;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.honhai.foxconn.fxccalendar.R;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static android.content.ContentValues.TAG;

public class RemindTimePopupWindow  extends PopupWindow {

    private RecyclerView recyclerView;
    private AddEventActivity addEventActivity;
    private String[] datas;
    private Adapter adapter;

    RemindTimePopupWindow(Context context,View popupLayout1, int w, int h){
        super(popupLayout1, w,h);
        addEventActivity = (AddEventActivity) context;
        datas = context.getResources().getStringArray(R.array.stringRemind);
        recyclerView = popupLayout1.findViewById(R.id.popup_window_remind_time);
        adapter = new Adapter(datas);
        recyclerView.setAdapter(adapter);
        recyclerView.setLayoutManager(new LinearLayoutManager(popupLayout1.getContext()));
    }

    public class Adapter extends RecyclerView.Adapter<MyViewHolder>{
        private String[] Datas;
        private Map<Integer, Boolean> map = new HashMap<>();

           Adapter(String[] Datas) {
               this.Datas = Datas;
               map = new HashMap<>();

           }

        @NonNull
        @Override
        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup,int i){
            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.add_event_alarm_time_recycler_item, viewGroup, false);
            return new MyViewHolder(v);

            }


        @Override
        public int getItemCount() {
            return Datas.length;

        }

        @Override
        public void onBindViewHolder(@NonNull MyViewHolder viewHolder, final int position) {
            viewHolder.mTextView.setText(datas[position]);
            viewHolder.mCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked == true) {
                        map.put(position, true);
                    } else {
                        map.remove(position);
                    }
                }
            });
            if (map != null && map.containsKey(position)) {
                viewHolder.mCheckBox.setChecked(true);
            } else {
                viewHolder.mCheckBox.setChecked(false);
            }
        }


        @Override
            public int getItemViewType(int position) { return position; }

    }

    class MyViewHolder extends  RecyclerView.ViewHolder{
        TextView mTextView;
        CheckBox mCheckBox;

        MyViewHolder(@NonNull View itemView){
            super(itemView);
            mTextView = itemView.findViewById(R.id.tview);
            mCheckBox = itemView.findViewById(R.id.min15_remind);
        }

    }

}

