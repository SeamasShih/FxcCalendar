package com.honhai.foxconn.fxccalendar.main;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.ColorStateList;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.BottomNavigationView;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.honhai.foxconn.fxccalendar.R;
import com.honhai.foxconn.fxccalendar.addevent.AddEventActivity;
import com.honhai.foxconn.fxccalendar.agenda.AgendaViewFragment;
import com.honhai.foxconn.fxccalendar.data.Data;
import com.honhai.foxconn.fxccalendar.elsemember.CalendarElseFragment;
import com.honhai.foxconn.fxccalendar.weekly.layout.CalendarWeeklyFragment;
import com.honhai.foxconn.fxccalendar.month.CalendarMonthFragment;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    private ArrayList<Fragment> fragments = new ArrayList<>();
    private CalendarWeeklyFragment weeklyFragment;
    private AgendaViewFragment summaryFragment;
    private CalendarElseFragment elseFragment;
    CalendarMonthFragment monthFragment;
    private BottomNavigationBar bottomBar;
    private AddEventButton btnAddEvent;
    private TextView title;
    private TextView subTitle;
    private Toolbar toolbar;

    private int calendarType;
    private boolean isCalendarFragment = true;

    private String userName = "UserName";

    public static final int CALENDAR_SUMMARY = 0;
    public static final int CALENDAR_WEEKLY = 1;
    public static final int CALENDAR_MONTHLY = 2;
    public static final int CALENDAR_MONTH = 3;

    public static final String SP_CALENDAR_TYPE_NAME = "CalendarType";
    public static final String SP_CALENDAR_TYPE = "type";

    public static final String INTENT_EVENT = "event";

    private SharedPreferences calendarSharedPreference;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        calendarSharedPreference = getSharedPreferences(SP_CALENDAR_TYPE_NAME, Context.MODE_PRIVATE);
        calendarType = calendarSharedPreference.getInt(SP_CALENDAR_TYPE, CALENDAR_WEEKLY);

        findViews();
        setFragment();
        setBottomBar();
        setBtnAddEvent();
        setToolbar();
    }

    private void setToolbar() {
        Calendar calendar = Calendar.getInstance();
        String month = calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.US);
        int year = calendar.get(Calendar.YEAR);
        title.setText(month + ", " + year);
        subTitle.setText(userName);

        toolbar.inflateMenu(R.menu.menu_main_top_toolbar);
    }

    private void setBtnAddEvent() {
        btnAddEvent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.setClass(MainActivity.this, AddEventActivity.class);
                startActivity(intent);
            }
        });
    }

    @SuppressLint("ClickableViewAccessibility")
    private void setBottomBar() {
        bottomBar.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
                bottomBar.moveLabelBar(menuItem.getOrder());
                return true;
            }
        });
        bottomBar.setOnNavigationItemClickListener(new BottomNavigationBar.OnNavigationItemClickListener() {
            @Override
            public boolean onNavigationItemClickListener(MotionEvent ev) {
                switch (bottomBar.getPressItem(ev)) {
                    case 0:
                        if (isCalendarFragment) {
                            CalendarFragment fragment = getCurrentFragment();
                            if (fragment != null)
                                fragment.rollback();
                        }else {
                            setCalendarType(calendarType);
                            isCalendarFragment = true;
                        }
                        break;
                    case 1:
                        //todo Seamas show Keep fragment
                        isCalendarFragment = false;
                        break;
                    case 3:
                        //todo Seamas show Feed fragment
                        isCalendarFragment = false;
                        break;
                    case 4:
                        showFragment(elseFragment);
                        isCalendarFragment = false;
                        break;
                }
                return true;
            }
        });
        bottomBar.setOnNavigationItemLongClickListener(new BottomNavigationBar.OnNavigationItemLongClickListener() {
            @Override
            public void onNavigationItemLongClickListener(MotionEvent ev) {
                switch (bottomBar.getPressItem(ev)) {
                    case 0:
                        showPopupSwitchCalendarView();
                        break;
                }
            }
        });
        setBottomMenuCalendarType(calendarType);
    }

    public void setCalendarType(int calendarType) {
        this.calendarType = calendarType;
        switch (calendarType) {
            case CALENDAR_MONTHLY:
                showFragment(monthFragment);
                break;
            case CALENDAR_WEEKLY:
                showFragment(weeklyFragment);
                break;
            case CALENDAR_SUMMARY:
                showFragment(summaryFragment);
                break;
        }
        setBottomMenuCalendarType(calendarType);
        calendarSharedPreference.edit().putInt(SP_CALENDAR_TYPE, calendarType).apply();
    }

    private CalendarFragment getCurrentFragment() {
        switch (calendarType) {
            case CALENDAR_MONTHLY:
                break;
            case CALENDAR_WEEKLY:
                return weeklyFragment;
            case CALENDAR_SUMMARY:
                return summaryFragment;
        }
        return null;
    }

    private void showPopupSwitchCalendarView() {
        View popupLayout = getLayoutInflater().inflate(R.layout.popup_window_select_calendar_layout, (ViewGroup) findViewById(R.id.main_layout));
        CalendarPopupWindow popupWindow = new CalendarPopupWindow(this, popupLayout, getWindow().getDecorView().getWidth(), getWindow().getDecorView().getHeight() / 2);
        popupWindow.setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.colorDefaultBackground)));
        popupWindow.setOutsideTouchable(true);
        popupWindow.setFocusable(true);
        popupWindow.showAsDropDown(bottomBar, 0, 0);
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.alpha = .5f;
        getWindow().setAttributes(lp);
        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                WindowManager.LayoutParams lp = getWindow().getAttributes();
                lp.alpha = 1f;
                getWindow().setAttributes(lp);
            }
        });
        popupWindow.setPopupCalendarListType(calendarType);
        popupWindow.setPopupCalendarListListener(calendarType);
    }

    @Override
    protected void onResume() {
        super.onResume();
        setBottomMenuItemStateColor();
        setToolbarColor();
    }

    private void setToolbarColor() {
        title.setTextColor(Data.getInstance().getThemeColor());

        MenuItem item = toolbar.getMenu().getItem(0);
        Drawable drawable = item.getIcon();
        drawable.setTint(Data.getInstance().getThemeColor());
        item.setIcon(drawable);
    }

    private void setBottomMenuCalendarType(int type) {
        switch (type) {
            case CALENDAR_MONTHLY:
                bottomBar.getMenu().getItem(0).setIcon(R.drawable.drawable_bottom_calendar_monthly);
                bottomBar.getMenu().getItem(0).setTitle(R.string.calendar_monthly);
                break;
            case CALENDAR_WEEKLY:
                bottomBar.getMenu().getItem(0).setIcon(R.drawable.drawable_bottom_calendar_weekly);
                bottomBar.getMenu().getItem(0).setTitle(R.string.calendar_weekly);
                break;
            case CALENDAR_SUMMARY:
                bottomBar.getMenu().getItem(0).setIcon(R.drawable.drawable_bottom_calendar_summary);
                bottomBar.getMenu().getItem(0).setTitle(R.string.calendar_summary);
                break;
        }
    }

    private void setBottomMenuItemStateColor() {
        bottomBar.setItemIconTintList(createColorStateList(Data.getInstance().getThemeColor(), getResources().getColor(R.color.colorBottomMenuDefault)));
        bottomBar.setItemTextColor(createColorStateList(Data.getInstance().getThemeColor(), getResources().getColor(R.color.colorBottomMenuDefault)));
    }

    private ColorStateList createColorStateList(int select, int normal) {
        int[] colors = new int[]{select, normal};
        int[][] states = new int[2][];
        states[0] = new int[]{android.R.attr.state_selected};
        states[1] = new int[]{};
        return new ColorStateList(states, colors);
    }

    private void showFragment(Fragment fragment){
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        for (int i = 0 ; i < fragments.size();i++){
            Fragment fg = fragments.get(i);
            if (fg.equals(fragment))
                transaction.show(fg);
            else
                transaction.hide(fg);
        }
        transaction.commit();
    }

    private void setFragment() {
        monthFragment = new CalendarMonthFragment();
        weeklyFragment = new CalendarWeeklyFragment();
        weeklyFragment.setOnWeekChangeListener(new CalendarWeeklyFragment.OnWeekChangeListener() {
            @Override
            public void onWeekChange(Calendar calendar) {
                String month = calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.US);
                int year = calendar.get(Calendar.YEAR);
                title.setText(month + ", " + year);
            }
        });

        summaryFragment = new AgendaViewFragment();

        elseFragment = new CalendarElseFragment();

        fragments.add(weeklyFragment);
        fragments.add(summaryFragment);
        fragments.add(elseFragment);
        fragments.add(monthFragment);

        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        for (int i = 0; i < fragments.size(); i++) {
            transaction.add(R.id.frame, fragments.get(i));
        }
        transaction.commit();

        setCalendarType(calendarType);
    }

    private void findViews() {
        bottomBar = findViewById(R.id.bottomBar);
        btnAddEvent = findViewById(R.id.btnAddEvent);
        title = findViewById(R.id.toolbarTitle);
        subTitle = findViewById(R.id.toolbarSubtitle);
        toolbar = findViewById(R.id.topBar);
    }
}
