package com.honhai.foxconn.fxccalendar.data;

import android.graphics.Color;

import com.avos.avoscloud.AVException;
import com.avos.avoscloud.AVObject;
import com.avos.avoscloud.AVQuery;
import com.avos.avoscloud.DeleteCallback;
import com.avos.avoscloud.FindCallback;
import com.avos.avoscloud.SaveCallback;

import java.util.ArrayList;
import java.util.List;

public class Data {

    private static Data instance = new Data();

    private ArrayList<Event> events = new ArrayList<>();
    private ArrayList<Group> groups = new ArrayList<>();
    private ArrayList<User> users = new ArrayList<>();
    private int themeColor = Color.RED;

    private Data() {
    }

    public static Data getInstance() {
        return instance;
    }

    public int getThemeColor() {
        return themeColor;
    }

    public void setThemeColor(int themeColor) {
        this.themeColor = themeColor;
    }

    public ArrayList<Event> getEvents() {
        return events;
    }

    public void setEvents(ArrayList<Event> events) {
        this.events = events;
    }


    public void addEventForCloud(String title, int startYear, int startMonth, int startDayOfMonth, int startHour,
                                 int startMinute, int endYear, int endMonth, int endDayOfMonth, int endHour, int endMinute,
                                 boolean isAllDay, int color, int repeat, boolean isChinese, int groupId, String note,
                                 String map, String url, boolean isNoTime) {
        AVObject event = new AVObject("Event");
        event.put("title", title);
        event.put("startYear", startYear);
        event.put("startMonth", startMonth);
        event.put("startDayOfMonth", startDayOfMonth);
        event.put("startHour", startHour);
        event.put("startMinute", startMinute);
        event.put("endYear", endYear);
        event.put("endMonth", endMonth);
        event.put("endDayOfMonth", endDayOfMonth);
        event.put("endHour", endHour);
        event.put("endMinute", endMinute);
        event.put("isAllDay", isAllDay);
        event.put("color", color);
        event.put("repeat", repeat);
        event.put("isChinese", isChinese);
        event.put("groupId", groupId);
        event.put("note", note);
        event.put("map", map);
        event.put("url", url);
        event.put("isNoTime", isNoTime);
        event.saveInBackground(new SaveCallback() {
            @Override
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });

    }

    public void updateEventForCloud(String title, int startYear, int startMonth, int startDayOfMonth, int startHour,
                                    int startMinute, int endYear, int endMonth, int endDayOfMonth, int endHour, int endMinute,
                                    boolean isAllDay, int color, int repeat, boolean isChinese, int groupId, String note,
                                    String map, String url, boolean isNoTime, String objectId) {
        AVObject event = AVObject.createWithoutData("Event", objectId);
        event.put("title", title);
        event.put("startYear", startYear);
        event.put("startMonth", startMonth);
        event.put("startDayOfMonth", startDayOfMonth);
        event.put("startHour", startHour);
        event.put("startMinute", startMinute);
        event.put("endYear", endYear);
        event.put("endMonth", endMonth);
        event.put("endDayOfMonth", endDayOfMonth);
        event.put("endHour", endHour);
        event.put("endMinute", endMinute);
        event.put("isAllDay", isAllDay);
        event.put("color", color);
        event.put("repeat", repeat);
        event.put("isChinese", isChinese);
        event.put("groupId", groupId);
        event.put("note", note);
        event.put("map", map);
        event.put("url", url);
        event.put("isNoTime", isNoTime);
        event.saveInBackground(new SaveCallback() {
            @Override
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });

    }

    public void getEventsForCloud() {
        final ArrayList<AVObject> avList = new ArrayList<>();
        avList.clear();
        AVQuery<AVObject> avQuery = new AVQuery<>("Event");
        avQuery.findInBackground(new FindCallback<AVObject>() {
            @Override
            public void done(List<AVObject> aList, AVException e) {
                if (e == null) {
                    avList.addAll(aList);
                    events.clear();
                    for (AVObject object : avList) {
                        Event event = new Event();
                        event.setTitle(object.get("title").toString());

                        event.setStartYear((int) (object.get("startYear")));
                        event.setStartMonth((int) (object.get("startMonth")));
                        event.setStartDayOfMonth((int) (object.get("startDayOfMonth")));
                        event.setStartHour((int) (object.get("startHour")));
                        event.setStartMinute((int) (object.get("startMinute")));

                        event.setEndYear((int) (object.get("endYear")));
                        event.setEndMonth((int) (object.get("endMonth")));
                        event.setEndDayOfMonth((int) (object.get("endDayOfMonth")));
                        event.setEndHour((int) (object.get("endHour")));
                        event.setEndMinute((int) (object.get("endMinute")));

                        event.setAllDay((boolean) (object.get("isAllDay")));
                        event.setColor((int) (object.get("color")));
                        event.setRepeat((int) (object.get("repeat")));
                        event.setChinese((boolean) (object.get("isChinese")));
                        event.setGroupId((int) (object.get("groupId")));

                        event.setNote(object.get("note").toString());
                        event.setMap(object.get("map").toString());
                        event.setUrl(object.get("url").toString());

                        event.setNoTime((boolean) (object.get("isNoTime")));
                        event.setObjectId(object.getObjectId());
                        events.add(event);
                    }
                } else {
                    e.printStackTrace();
                }
            }
        });

    }

    public void deleteEventForCloud(String objectId) {
        AVObject event = AVObject.createWithoutData("Event", objectId);
        event.deleteInBackground(new DeleteCallback() {
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void getEventsForCloudFromGroup(ArrayList<String> GroupIds) {
        final ArrayList<AVObject> avList = new ArrayList<>();
        avList.clear();
        AVQuery<AVObject> avQuery = new AVQuery<>("Event");
        avQuery.whereContainedIn("groupId", GroupIds);
        avQuery.findInBackground(new FindCallback<AVObject>() {
            @Override
            public void done(List<AVObject> aList, AVException e) {
                if (e == null) {
                    avList.addAll(aList);
                    events.clear();
                    for (AVObject object : avList) {
                        Event event = new Event();
                        event.setTitle(object.get("title").toString());

                        event.setStartYear((int) (object.get("startYear")));
                        event.setStartMonth((int) (object.get("startMonth")));
                        event.setStartDayOfMonth((int) (object.get("startDayOfMonth")));
                        event.setStartHour((int) (object.get("startHour")));
                        event.setStartMinute((int) (object.get("startMinute")));

                        event.setEndYear((int) (object.get("endYear")));
                        event.setEndMonth((int) (object.get("endMonth")));
                        event.setEndDayOfMonth((int) (object.get("endDayOfMonth")));
                        event.setEndHour((int) (object.get("endHour")));
                        event.setEndMinute((int) (object.get("endMinute")));

                        event.setAllDay((boolean) (object.get("isAllDay")));
                        event.setColor((int) (object.get("color")));
                        event.setRepeat((int) (object.get("repeat")));
                        event.setChinese((boolean) (object.get("isChinese")));
                        event.setGroupId((int) (object.get("groupId")));

                        event.setNote(object.get("note").toString());
                        event.setMap(object.get("map").toString());
                        event.setUrl(object.get("url").toString());

                        event.setNoTime((boolean) (object.get("isNoTime")));
                        event.setObjectId(object.getObjectId());
                        events.add(event);
                    }
                } else {
                    e.printStackTrace();
                }
            }
        });

    }

    public void addGroupForCloud(int groupId, String groupName, ArrayList<String> workIds) {
        AVObject group = new AVObject("Group");
        group.put("groupId", groupId);
        group.put("groupName", groupName);
        for (String workId : workIds) {
            group.addUnique("workId", workId);
        }
        group.saveInBackground(new SaveCallback() {
            @Override
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });

    }

    public void updateGroupForCloud(int groupId, String groupName, ArrayList<String> workIds, String objectId) {
        AVObject group = AVObject.createWithoutData("Group", objectId);
        group.put("groupId", groupId);
        group.put("groupName", groupName);
        group.remove("workId");
        for (String workId : workIds) {
            group.addUnique("workId", workId);
        }
        group.saveInBackground(new SaveCallback() {
            @Override
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void getGroupsForCloud() {
        final ArrayList<AVObject> avList = new ArrayList<>();
        avList.clear();
        AVQuery<AVObject> avQuery = new AVQuery<>("Group");
        avQuery.findInBackground(new FindCallback<AVObject>() {
            @Override
            public void done(List<AVObject> aList, AVException e) {
                if (e == null) {
                    avList.addAll(aList);
                    groups.clear();
                    for (AVObject object : avList) {
                        Group group = new Group();
                        group.setGroupId((int) (object.get("groupId")));
                        group.setGroupName(object.get("groupName").toString());
                        group.setWorkId((ArrayList<String>) object.getList("workId"));
                        group.setObjectId(object.getObjectId());
                        groups.add(group);
                    }
                } else {
                    e.printStackTrace();
                }
            }
        });

    }

    public void deleteGroupForCloud(String objectId) {
        AVObject group = AVObject.createWithoutData("Group", objectId);
        group.deleteInBackground(new DeleteCallback() {
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void addUserForCloud(String workId, String password, String name, String englishName) {
        AVObject userInfo = new AVObject("UserInfo");
        userInfo.put("workId", workId);
        userInfo.put("password", password);
        userInfo.put("name", name);
        userInfo.put("englishName", englishName);
        userInfo.saveInBackground(new SaveCallback() {
            @Override
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });

    }

    public void updateUserForCloud(String workId, String password, String name, String englishName, String objectId) {
        AVObject userInfo = AVObject.createWithoutData("UserInfo", objectId);
        userInfo.put("workId", workId);
        userInfo.put("password", password);
        userInfo.put("name", name);
        userInfo.put("englishName", englishName);
        userInfo.saveInBackground(new SaveCallback() {
            @Override
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void getUsersForCloud() {
        final ArrayList<AVObject> avList = new ArrayList<>();
        avList.clear();
        AVQuery<AVObject> avQuery = new AVQuery<>("UserInfo");
        avQuery.findInBackground(new FindCallback<AVObject>() {
            @Override
            public void done(List<AVObject> aList, AVException e) {
                if (e == null) {
                    avList.addAll(aList);
                    users.clear();
                    for (AVObject object : avList) {
                        User user = new User();
                        user.setWorkId(object.get("workId").toString());
                        user.setPassword(object.get("password").toString());
                        user.setName(object.get("name").toString());
                        user.setEnglishName(object.get("englishName").toString());
                        user.setObjectId(object.getObjectId());
                        users.add(user);
                    }
                } else {
                    e.printStackTrace();
                }
            }
        });

    }

    public void deleteUserForCloud(String objectId) {
        AVObject userInfo = AVObject.createWithoutData("UserInfo", objectId);
        userInfo.deleteInBackground(new DeleteCallback() {
            public void done(AVException e) {
                if (e != null) {
                    e.printStackTrace();
                }
            }
        });
    }
}
