package com.honhai.foxconn.fxccalendar.main.view;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;

import com.honhai.foxconn.fxccalendar.R;

import java.util.Calendar;
import java.util.Locale;

public class CalendarWeeklyView extends View {

    private Paint linePaint;
    private Paint dayTextPaint;
    private Paint eventTextPaint;
    private float eventTextAdjY;

    private Day[] days;

    private float dayHeight;
    private float mWidth;
    private float eventRectLeft;
    private float eventHeight;
    private float eventGapHeight;
    private float eventRectWidth;
    private float eventTextLeft = 200;
    private float eventTimeLeft = 40;
    private int maxEvent;

    public CalendarWeeklyView(Context context, AttributeSet attrs) {
        super(context, attrs);

        linePaint = new Paint();
        linePaint.setColor(getResources().getColor(R.color.colorCalendarLine));
        linePaint.setStyle(Paint.Style.STROKE);
        linePaint.setStrokeWidth(1f);

        dayTextPaint = new Paint();
        dayTextPaint.setAntiAlias(true);
        dayTextPaint.setTextAlign(Paint.Align.CENTER);

        eventTextPaint = new Paint();
        eventTextPaint.setAntiAlias(true);
        eventTextPaint.setTextAlign(Paint.Align.LEFT);

        days = new Day[7];
        for (int i = 0; i < days.length; i++) {
            days[i] = new Day();
        }
        Calendar calendar = Calendar.getInstance();
        calendar.set(2018, 6, 1);
        setWeekday(calendar);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        dayHeight = (float) getMeasuredHeight() / 7;
        mWidth = getMeasuredWidth();
        eventHeight = 40;
        eventGapHeight = eventHeight / 5;
        maxEvent = (int) ((dayHeight - eventGapHeight) / (eventHeight + eventGapHeight));
        eventRectLeft = mWidth * .2f;
        eventRectWidth = 13;

        eventTextPaint.setTextSize(eventHeight);
        Paint.FontMetrics metrics = eventTextPaint.getFontMetrics();
        eventTextAdjY = (metrics.descent - metrics.ascent) / 2 - metrics.descent;
        invalidate();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        canvas.save();
        drawDay(canvas, 0);
        for (int i = 1; i < 7; i++) {
            canvas.translate(0, dayHeight);
            drawDay(canvas, i);
        }
        canvas.restore();

        canvas.drawLine(0, getHeight(), mWidth, getHeight(), linePaint);
    }

    private void drawDay(Canvas canvas, int pos) {
        canvas.save();
        canvas.drawLine(0, 0, mWidth, 0, linePaint);
        dayTextPaint.setTextSize(dayHeight / 4);
        dayTextPaint.setColor(getDayTextColor(pos));
        canvas.drawText(String.valueOf(days[pos].dayOfMonth), eventRectLeft / 2, dayHeight / 2, dayTextPaint);
        dayTextPaint.setTextSize(dayHeight / 8);
        dayTextPaint.setColor(getResources().getColor(R.color.colorCalendarSubtitle));
        canvas.drawText(days[pos].weekString, eventRectLeft / 2, dayHeight * 3 / 4, dayTextPaint);

        int amount = 6;
        amount = amount > maxEvent ? maxEvent : amount;
        canvas.translate(eventRectLeft, dayHeight / 2);
        canvas.translate(0, -(eventHeight + eventGapHeight) * (amount - 1) / 2);
        for (int i = 0; i < amount; i++) {
            eventTextPaint.setColor(getResources().getColor(R.color.colorPrimary));
            canvas.drawRoundRect(0, -eventHeight / 2, eventRectWidth, eventHeight / 2, eventRectWidth, eventRectWidth, eventTextPaint);
            canvas.drawText("Holiday", eventTimeLeft, eventTextAdjY, eventTextPaint);
            eventTextPaint.setColor(getResources().getColor(R.color.colorCalendarWorkday));
            canvas.drawText("EventString", eventTextLeft, eventTextAdjY, eventTextPaint);
            canvas.translate(0, eventHeight + eventGapHeight);
        }
        canvas.restore();
    }

    private int getDayTextColor(int pos) {
        switch (pos) {
            case 0:
                return getResources().getColor(R.color.colorCalendarHoliday);
            case 6:
                return getResources().getColor(R.color.colorCalendarSaturday);
            default:
                return getResources().getColor(R.color.colorCalendarWorkday);
        }
    }

    public void setWeekday(Calendar calendar) {
        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        int weekOrder = getWeekOrder(dayOfWeek);
        calendar.add(Calendar.DAY_OF_MONTH, -1 * weekOrder);
        for (int i = 0; i < days.length; i++) {
            days[i].set(calendar);
            calendar.add(Calendar.DAY_OF_MONTH, 1);
        }
    }

    private int getWeekOrder(int dayOfWeek) {
        switch (dayOfWeek) {
            case Calendar.SUNDAY:
                return 0;
            case Calendar.MONDAY:
                return 1;
            case Calendar.TUESDAY:
                return 2;
            case Calendar.WEDNESDAY:
                return 3;
            case Calendar.THURSDAY:
                return 4;
            case Calendar.FRIDAY:
                return 5;
            case Calendar.SATURDAY:
                return 6;
            default:
                return -1;
        }
    }

    private class Day {
        public int year;
        public int month;
        public int dayOfMonth;
        public int dayOfWeek;
        public String weekString;

        Day() {
            year = -1;
            month = -1;
            dayOfMonth = -1;
            dayOfWeek = -1;
        }

        void set(Calendar calendar) {
            year = calendar.get(Calendar.YEAR);
            month = calendar.get(Calendar.MONTH);
            dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);
            dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
            weekString = calendar.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.US);
        }
    }
}
