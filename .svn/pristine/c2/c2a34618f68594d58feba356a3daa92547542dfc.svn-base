package com.honhai.foxconn.fxccalendar.month;


import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Paint;

import android.graphics.Path;
import android.support.annotation.NonNull;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.graphics.Canvas;
import android.view.WindowManager;

import com.honhai.foxconn.fxccalendar.R;
import com.honhai.foxconn.fxccalendar.addevent.AddEventActivity;
import com.honhai.foxconn.fxccalendar.data.Event;
import com.honhai.foxconn.fxccalendar.data.holiday.Holiday;
import com.honhai.foxconn.fxccalendar.data.interfaces.RefreshData;
import com.honhai.foxconn.fxccalendar.eventpreview.MyDialog2;
import com.honhai.foxconn.fxccalendar.data.Data;
import com.honhai.foxconn.fxccalendar.weekly.data.CalendarDay;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Locale;

import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.dayDiff;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.getAfterDay;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.getCurrentDate;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.getMonth;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.getMonthNumFromDate;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.getWeekNumOfMonth;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.getWordCount;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.getYear;
import static com.honhai.foxconn.fxccalendar.month.CalendarUtil.solarToLunar;


public class CalendarMonthView extends View implements RefreshData, View.OnTouchListener {



    private final String ALL_DAY = getResources().getString(R.string.calendarWeeklyAllDayText);
    private final String HOLIDAY = getResources().getString(R.string.calendarWeeklyHolidayText);
    private final String WORKDAY = getResources().getString(R.string.calendarWeeklyWorkdayText);
    private final String OBSERVED = getResources().getString(R.string.calendarWeeklyObservedText);


    @Override
    public void refresh() {
        setYearMonth(year,month);
        //invalidate();
    }

    /**
     * 使用枚举表示日期状态（今天、本月、非本月）
     *
     *
     *
     */
    public static enum CalendarState {
        TODAY, CURRENT_MONTH, LAST_MONTH,NEXT_MONTH
    }


    OnDoubleClickListener eventDoubleClickListener;
    OnLongPressListener eventLongPressListener;
    private GestureDetector gestureDetector;

    private MonthDay[] days;

    String[] weeks = getResources().getStringArray(R.array.weeks);
    /** 屏幕宽度 */
    private int width;
    /** 屏幕高度 */
    private int height;
    /** 日历数组 */
    private int[][] dateNum;
    /** 日历日期状态数组 */
    private CalendarState[][] calendarStates;
    /**月視圖要顯示的週數*/
    private int weekNum;
    /** 年 */
    private int year;
    /** 月 */
    private int month;
    //转换农历年
    private int lunarYear;
    //转换农历月
    private int lunarMonth;

    private int[] date;
    /** 绘画类 */
    private DrawCalendar drawCalendar;

    /**日历星期栏高度*/
    private float weekHeight;

    /** 日历表格宽度 */
    private float dateNumWidth;

    private float dateGapWidth;

    private float dateNumHeight;

    private float  dateNumHeighter;
    //Cursor坐标参数
    private int dateCursorX,dateCursorY;

    private Boolean isCursor = false;

    private float eventHeight;

    private CalendarDay cursor;


    public CalendarMonthView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        initUI(context);
    }

    public CalendarMonthView(final Context context, AttributeSet attrs) {
        super(context, attrs);

        initUI(context);
        gestureDetector = new GestureDetector(context,new simpleGestureListener());
        setOnTouchListener(this);
        setClickable(true);
        setDoubleClickListener(new OnDoubleClickListener() {
            @Override
            public void onDoubleClick(MotionEvent event) {
                Intent intent = new Intent();
                date = new int[3];
                date = CalendarUtil.getCurrentDate(year,month,dateNum[dateCursorY][dateCursorX],dateCursorY,dateCursorX);
                intent.putExtra("date",date);
                MyDialog2 myDialog2 = new MyDialog2(getContext(),date);
                myDialog2.show();
                DisplayMetrics displayMetrics = new DisplayMetrics();
                myDialog2.getWindow().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);

                WindowManager.LayoutParams params = myDialog2.getWindow().getAttributes();
                params.height = (int)(displayMetrics.heightPixels*0.70);
                myDialog2.getWindow().setAttributes(params);

            }
        });
        setLongPressListener(new OnLongPressListener() {
            @Override
            public void onLongPress(MotionEvent event) {
                Intent intent = new Intent();
                date = new int[3];
                date = CalendarUtil.getCurrentDate(year,month,dateNum[dateCursorY][dateCursorX],dateCursorY,dateCursorX);
                intent.putExtra("date",date);
                intent.setClass(context, AddEventActivity.class);
                context.startActivity(intent);
            }
        });
        Data.getInstance().addRefreshView(this);
    }

    public CalendarMonthView(Context context) {
        super(context);
        initUI(context);
    }

    public void setCursor(CalendarDay day) {
        cursor = day;
    }

    public void setDoubleClickListener(OnDoubleClickListener listener) {
        eventDoubleClickListener = listener;
    }
     public  void onEventClick(int dateNumX, int dateNumY,Boolean tf){
        dateCursorX = dateNumX;
        dateCursorY = dateNumY;
        isCursor = tf;
     }

     public void setLongPressListener(OnLongPressListener listener){
        eventLongPressListener = listener;
     }

    /**
     * 初始化UI
     *
     * @param context
     */
    private void initUI(Context context) {
        // 初始化日期
        year = CalendarUtil.getYear();
        month = CalendarUtil.getMonth();
        //setYearMonth(year,month);
        lunarYear = year;
        lunarMonth = month;
        calendarStates = new CalendarState[6][7];
        //drawCalendar = new DrawCalendar(year, month);

    }
    /**
     * 设置日历时间并刷新日历视图
     *
     * @param year
     * @param month
     */
    public void setYearMonth(int year, int month) {
        this.year = year;
        this.month = month;
        weekNum = getWeekNumOfMonth(year,month);
        //System.out.println("weekNum:"+weekNum);
        days = new MonthDay[weekNum*7];
        for (int i = 0;i < days.length;i++){
            days[i] = new MonthDay();
        }
        refreshMonthDayEvent(year,month,days);
        drawCalendar = new DrawCalendar(year, month);

        invalidate();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        // TODO Auto-generated method stub
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        // 获得控件宽度
        width = getMeasuredWidth();
        //星期控件高度
        weekHeight = height / 16.0f;
        // 计算日历表格宽度
        dateNumWidth = width / 7.0f;
        //日曆表格間隔寬度
        dateGapWidth = dateNumWidth/40.0f;
        // 计算日历高度
        height = getMeasuredHeight();

        eventHeight = (height - weekHeight)/30.0f;
        // 设置控件宽高
        dateNumHeight = (height - weekHeight) / 6.0f;

        dateNumHeighter =  (height - weekHeight) / 5.0f;

        setMeasuredDimension(width, height);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        // TODO Auto-generated method stub
        super.onDraw(canvas);
        drawCalendar.drawCalendarCanvas(canvas);

    }

    protected void refreshMonthDayEvent(int year,int month,MonthDay[] monthDays){
        int tmpDays;
        dateNum = getMonthNumFromDate(year,month);
        ArrayList<Event> events = Data.getInstance().getEvents();
        Locale locale = getResources().getConfiguration().locale;
        ArrayList<Holiday> holidays;

        holidays = Data.getInstance().getHolidays(getContext(), locale.equals(Locale.CHINA) ? locale : Locale.TAIWAN);
        for (MonthDay monthDay : monthDays){
            monthDay.events.clear();
        }
        for (int i = 0;i < monthDays.length;i++){
            int[] tmpDate = getCurrentDate(year,month,dateNum[i/7][i%7],i/7,i%7);
            monthDays[i].set(tmpDate[0],tmpDate[1],dateNum[i/7][i%7]);
            //System.out.println("year:"+monthDays[i].year);
            //System.out.println("month:"+monthDays[i].month);
            //System.out.println("dayOfMonth:"+monthDays[i].dayOfMonth);
            for (int k = 0; k < holidays.size(); k++) {
                Holiday holiday = holidays.get(k);
                String[] time = holiday.getDate().split("-");
                int mYear = Integer.valueOf(time[0]);
                int mMonth = Integer.valueOf(time[1]) + 1;
                int dayOfMonth = Integer.valueOf(time[2]);
                //System.out.println("MMMMyear:"+mYear);
                //System.out.println("MMMMmonth:"+mMonth);
                //System.out.println("MMMMdayOfMonth:"+dayOfMonth);
                if (monthDays[i].equal(mYear, mMonth, dayOfMonth)) {
                    monthDays[i].count++;
                    monthDays[i].isHoliday = true;
                    monthDays[i].events.add(new MonthDayEvent(holiday.getName(), holiday.getName(), -1));
                    Log.i("Holiday:",holiday.getName()+holiday.getDate());
                }
            }

        }
        for (int i = 0;i < monthDays.length;i++){
            for (int j = 0;j < events.size();j++){
                Event event = events.get(j);
                tmpDays = checkEventTime(event,monthDays[i],j);
                if (tmpDays > 0) {
                    for (int m = 0;m < tmpDays+1;m++){
                        if (monthDays[i+m].isHoliday)
                            monthDays[i].isSigner = true;
                    }
                    if (monthDays[i].isSigner){
                        for (int m = 0;m < tmpDays;m++)
                            monthDays[i+m].isSigner = true;
                    }

                    Log.i("tmpDays:====", String.valueOf(tmpDays));
                }
            }
            arrangeDayEvents(monthDays[i]);

        }

        for (int i = 0;i < monthDays.length;i++){
            if (monthDays[i].isSigner&&!monthDays[i].isHoliday){
                monthDays[i].events.add(0,monthDays[i].events.get(0));
                monthDays[i].count--;
                monthDays[i].isLongEvent[1] = false;
                if (monthDays[i].isLongEvent[0])
                monthDays[i].isLongEvent[1] = true;
            }
            for (int j = 0;j < monthDays[i].events.size();j++){
                Log.i("everyDayEvent:",j + monthDays[i].events.get(j).title);
            }
        }

        invalidate();
    }
    private void arrangeDayEvents(MonthDay day) {
        if (day.events.size() != 0) {
            ArrayList<MonthDayEvent> events = day.events;
            Collections.sort(events);
        }
    }

    private int checkEventTime(Event event, MonthDay day, int order) {
        if (event.isNoTime() || !isEventTimeCorrect(event))
            return 0;
        int startStatus = checkStartTime(event, day);
        int endStatus = checkEndTime(event, day);
        if (startStatus != 1 && endStatus != -1) {

            if (startStatus == 0&&endStatus == 0){
                day.events.add(new MonthDayEvent(event, "0", order));
                day.count++;
                return 0;
            }else{
                String eventStartDate = new StringBuilder().append(event.getStartYear()).append("-").append(event.getStartMonth()).append("-").append(event.getStartDayOfMonth()).toString();
                String eventEndDate = new StringBuilder().append(event.getEndYear()).append("-").append(event.getEndMonth()).append("-").append(event.getEndDayOfMonth()).toString();
                String eventDays = String.valueOf(dayDiff(eventEndDate,eventStartDate,"yyyy-MM-dd"));
                if (startStatus != 0&&day.count < 4)
                day.isLongEvent[day.count] = true;
                day.events.add(new MonthDayEvent(event, eventDays, order));
                day.count++;
                if (startStatus == 0&&day.count==1) {
                    Log.i("LongEvent:====",event.getTitle());
                    return Integer.valueOf(eventDays);
                }
                else
                    return 0;

                //System.out.println("LongEventTitle:"+event.getTitle());
                //System.out.println("eventDays:"+eventDays);
                //System.out.println("count:"+day.count);

            }

        }else
            return 0;
    }

    private boolean isEventTimeCorrect(Event event) {
        Calendar s = Calendar.getInstance();
        Calendar e = Calendar.getInstance();
        s.set(event.getStartYear(), event.getStartMonth(), event.getStartDayOfMonth(), event.getStartHour(), event.getStartMinute());
        e.set(event.getEndYear(), event.getEndMonth(), event.getEndDayOfMonth(), event.getEndHour(), event.getEndMinute());
        return e.after(s);
    }

    private int checkStartTime(Event event, MonthDay day) {
        int y = Integer.compare(event.getStartYear(), day.year);
        if (y == 0) {
            Calendar e = Calendar.getInstance();
            Calendar d = Calendar.getInstance();
            e.set(event.getStartYear(), event.getStartMonth() + 1, event.getStartDayOfMonth());
            d.set(day.year, day.month, day.dayOfMonth);
            int wE = e.get(Calendar.DAY_OF_YEAR);
            int wD = d.get(Calendar.DAY_OF_YEAR);
            return Integer.compare(wE, wD);
        } else
            return y;
    }

    private int checkEndTime(Event event, MonthDay day) {
        int y = Integer.compare(event.getEndYear(), day.year);
        if (y == 0) {
            Calendar e = Calendar.getInstance();
            Calendar d = Calendar.getInstance();
            e.set(event.getEndYear(), event.getEndMonth() +1, event.getEndDayOfMonth());
            d.set(day.year, day.month, day.dayOfMonth);
            int wE = e.get(Calendar.DAY_OF_YEAR);
            int wD = d.get(Calendar.DAY_OF_YEAR);
            return Integer.compare(wE, wD);
        } else
            return y;
    }

    public class MonthDayEvent implements Comparable<MonthDayEvent> {

        int color;
        Boolean isAllday;
        int startDate;
        String time;
        String title;
        String eventId;
        int eventOrder;

        MonthDayEvent() {
        }

        MonthDayEvent(Event event, String time, int order) {
            this.color = event.getColor();
            this.time = time;
            this.startDate = event.getStartDayOfMonth();
            this.isAllday = event.isAllDay();
            this.title = event.getTitle();
            eventId = event.getObjectId();
            eventOrder = order;
        }

        MonthDayEvent(String title, String time, int order) {
            this.title = title;
            this.time = time;
            this.eventOrder = order;
        }

        @Override
        public int compareTo(@NonNull MonthDayEvent o) {
                int mPriority = 0;
                int oPriority = 0;
                String oTime = o.time;
                if (time.equals(ALL_DAY))
                    mPriority = 4;
                else if (time.equals(HOLIDAY) || time.equals(OBSERVED) || time.equals(WORKDAY))
                    mPriority = 5;
                else if (time.startsWith("~"))
                    mPriority = 2;
                else if (time.contains(":"))
                    mPriority = 3;
                if (oTime.equals(ALL_DAY))
                    oPriority = 4;
                else if (oTime.equals(HOLIDAY) || oTime.equals(OBSERVED) || oTime.equals(WORKDAY))
                    oPriority = 5;
                else if (oTime.startsWith("~"))
                    oPriority = 2;
                else if (oTime.contains(":"))
                    oPriority = 3;
                if (oPriority == mPriority) {
                    String[] mTimeString;
                    String[] oTimeString;
                    int[] mTimeInt = new int[2];
                    int[] oTimeInt = new int[2];
                    switch (oPriority) {
                        case 2:
                            String mS = time.substring(1);
                            String oS = time.substring(1);
                            mTimeString = mS.split(":");
                            oTimeString = oS.split(":");
                            mTimeInt[0] = Integer.parseInt(mTimeString[0]);
                            mTimeInt[1] = Integer.parseInt(mTimeString[1]);
                            oTimeInt[0] = Integer.parseInt(oTimeString[0]);
                            oTimeInt[1] = Integer.parseInt(oTimeString[1]);
                            if (mTimeInt[0] != oTimeInt[0])
                                return oTimeInt[0] - mTimeInt[0];
                            return oTimeInt[1] - mTimeInt[1];
                        case 3:
                            mTimeString = time.split(":");
                            oTimeString = oTime.split(":");
                            mTimeInt[0] = Integer.parseInt(mTimeString[0]);
                            mTimeInt[1] = Integer.parseInt(mTimeString[1]);
                            oTimeInt[0] = Integer.parseInt(oTimeString[0]);
                            oTimeInt[1] = Integer.parseInt(oTimeString[1]);
                            if (mTimeInt[0] != oTimeInt[0])
                                return mTimeInt[0] - oTimeInt[0];
                            return mTimeInt[1] - oTimeInt[1];
                    }
                }
                return oPriority - mPriority;
        }
    }
    /*protected ArrayList<Event> loadEvents(int year,int month){
        //緩存當前3個月份的事件
        int leMinYear = 0,leMinMonth = 0,leMaxYear = 0,leMaxMonth = 0;
        if (month == 1){
            leMinYear = year - 1;
            leMinMonth = 12;
            leMaxYear = year;
            leMaxMonth = month + 1;
        }else if (month == 12){
            leMinYear = year;
            leMinMonth = month - 1;
            leMaxYear = year + 1;
            leMaxMonth = 1;
        }else{
            leMaxYear = year;
            leMinYear = year;
            leMinMonth = month - 1;
            leMaxMonth = month + 1;
        }
        int [][] dateNumLast = getMonthNumFromDate(leMinYear, leMinMonth);
        int [][] dateNumNext = getMonthNumFromDate(leMaxYear, leMaxMonth);
        int weekNumNext = getWeekNumOfMonth(leMaxYear,leMaxMonth);
        ArrayList<Event> monthEvents = new ArrayList<>();
        ArrayList<Event> events = Data.getInstance().getEvents();
        int[] tmp1 = getCurrentDate(leMinYear,leMinMonth,dateNumLast[0][0],0,0);
        int[] tmp2 = getCurrentDate(leMaxYear,leMaxMonth,dateNumNext[weekNumNext-1][6],weekNumNext-1,6);
        String firstDateOfMonth = new StringBuilder().append(tmp1[0]).append("-").append(tmp1[1]).append("-").append(tmp1[2]).toString();
        String endDateOfMonth = new StringBuilder().append(tmp2[0]).append("-").append(tmp2[1]).append("-").append(tmp2[2]).toString();
        //System.out.println("firstDateOfMonth"+firstDateOfMonth);
        //System.out.println("endDateOfMonth"+endDateOfMonth);
        for (Event event : events){
            String eventStartDate = new StringBuilder().append(event.getStartYear()).append("-").append(event.getStartMonth()).append("-").append(event.getStartDayOfMonth()).toString();
            String eventEndDate = new StringBuilder().append(event.getEndYear()).append("-").append(event.getEndMonth()).append("-").append(event.getEndDayOfMonth()).toString();
            //System.out.print("monthEvents:start");
            //System.out.println(dayDiff(eventStartDate,firstDateOfMonth,"yyyy-MM-dd"));
            //System.out.println(dayDiff(endDateOfMonth,eventStartDate,"yyyy-MM-dd"));
            if (dayDiff(eventStartDate,firstDateOfMonth,"yyyy-MM-dd") >= 0&&dayDiff(endDateOfMonth,eventStartDate,"yyyy-MM-dd") >= 0){
                //System.out.print("monthEvents:start00");
                //System.out.println(event.getTitle());
                monthEvents.add(event);
            }

        }
        return monthEvents;
    }*/


    /**
     * 封装绘画日历方法的绘画类
     *
     *
     *
     */
    class DrawCalendar {

        /**绘画普通横线画笔*/
        private Paint mPaintLine;
        /**绘画当前周横线画笔*/
        private Paint mPaintWeekLine;
        /**绘画星期画笔*/
        private Paint mPaintWeek;
        /** 绘画日期画笔 */
        private Paint mPaintText;
        /** 绘画本日的蓝圆 背景的画笔 */
        private Paint mPaintCircle;
        /** 字体高度 */
        private float fontHeight;
        /**农历日期画笔*/
        private Paint mLunerPaintText;
        /** 光标画笔*/
        private Paint mPaintCursor;
        /*節日畫筆*/
        private  Paint mPaintHoliday;

        /*節日字體畫筆*/
        private Paint mPaintHolidayText;

        /*事件字體畫筆*/
        private  Paint mPaintEventText;

        private  Paint mPaintEventRect;

        private  Paint mPainEventNumText;
        //阴历字体高度
        private float fontLunarHeight;

        private float fontEventHeight;

        private int[] lunar;


        private int maxItems;


        @SuppressLint("ResourceAsColor")
        public DrawCalendar(int year, int month) {

            // 获得月份日期排布数组
            dateNum = getMonthNumFromDate(year, month);
            weekNum = getWeekNumOfMonth(year,month);


                    //初始化绘画星期栏画笔
            mPaintWeek = new Paint();
            mPaintWeek.setTextSize(25);
            mPaintWeek.setColor(Color.GRAY);
            mPaintWeek.setAntiAlias(true);// 设置画笔的锯齿效果。
            // 初始化绘画文本的画笔
            mPaintText = new Paint();
            mPaintText.setTextSize(25);
            mPaintText.setColor(Color.GRAY);// 设置灰色
            mPaintText.setAntiAlias(true);// 设置画笔的锯齿效果。
            // 获得字体高度
            Paint.FontMetrics fm = mPaintText.getFontMetrics();
            fontHeight = (float) Math.ceil(fm.descent - fm.top) / 2;

            //农历绘画文本的画笔
            mLunerPaintText = new Paint();
            mLunerPaintText.setTextSize(20);
            mLunerPaintText.setColor(Color.LTGRAY);
            mLunerPaintText.setAntiAlias(true);
            //获得农历字体高度
            Paint.FontMetrics fmLuner = mLunerPaintText.getFontMetrics();
            fontLunarHeight = (float) Math.ceil(fmLuner.descent - fmLuner.top) / 2;

            //普通日历线
            mPaintLine = new Paint();
            mPaintLine.setColor(getResources().getColor(R.color.colorCalendarLine));
            mPaintLine.setStyle(Paint.Style.STROKE);
            mPaintLine.setStrokeWidth(1f);

            // 初始化绘画日期框的画笔
            mPaintCircle = new Paint();
            mPaintCircle.setStyle(Paint.Style.FILL);
            mPaintCircle.setStrokeWidth(2);
            mPaintCircle.setColor(Color.LTGRAY);
            mPaintCircle.setAntiAlias(true);// 设置画笔的锯齿效果。

            //初始化繪畫選中日期框畫筆
            mPaintCursor = new Paint();
            mPaintCursor.setStyle(Paint.Style.FILL);
            mPaintCursor.setStrokeWidth(2);
            mPaintCursor.setColor(getResources().getColor(R.color.colorCalendarLine));
            mPaintCursor.setAntiAlias(true);

            //初始化繪畫假日畫筆
            mPaintHoliday = new Paint();
            mPaintHoliday.setAntiAlias(true);
            mPaintHoliday.setStyle(Paint.Style.FILL);
            mPaintHoliday.setColor(Color.RED);

            /*初始化節日字體畫筆*/
            mPaintHolidayText = new Paint();
            mPaintHolidayText.setColor(Color.WHITE);
            mPaintHolidayText.setTextSize(20);
            mPaintHolidayText.setAntiAlias(true);

            /*初始化事件內容畫筆*/
            mPaintEventText = new Paint();
            mPaintEventText.setColor(Color.WHITE);
            mPaintEventText.setTextSize(20);
            mPaintEventText.setAntiAlias(true);
            mPaintEventText.setTextAlign(Paint.Align.CENTER);
            Paint.FontMetrics fmEvent = mPaintEventText.getFontMetrics();
            fontEventHeight = (float) Math.ceil(fmEvent.descent - fmEvent.top) / 2;

            /*初始化事件框畫筆*/
            mPaintEventRect = new Paint();
            mPaintEventRect.setStyle(Paint.Style.FILL);
            mPaintEventRect.setStrokeWidth(2);
            mPaintEventRect.setColor(getResources().getColor(R.color.colorCalendarLine));
            mPaintEventRect.setAntiAlias(true);

            mPainEventNumText = new Paint();
            mPainEventNumText.setColor(Color.WHITE);
            mPainEventNumText.setTextSize(18);
            mPainEventNumText.setAntiAlias(true);
        }

        /**
         * 绘画日历
         *
         * @param canvas
         */
        public void drawCalendarCanvas(Canvas canvas) {

            maxItems = weekNum > 5 ? 2 : 3;

            if (isCursor) {
                canvas.drawRect(dateNumWidth * dateCursorX,
                        weekHeight + dateNumHeight * dateCursorY, dateNumWidth * (dateCursorX + 1), weekHeight + dateNumHeight * (dateCursorY + 1),
                        mPaintCursor);
            }
            if (weekNum < 6){
                dateNumHeight = dateNumHeighter;
            }
                       //星期绘制
            for(int i = 0;i < 7; i++ ){
                if(i==0){
                    mPaintWeek.setColor(Color.RED);
                }else{
                    if (i==6){
                        mPaintWeek.setColor(Color.BLUE);
                    }
                    else{
                        mPaintWeek.setColor(Color.GRAY);
                    }
                }
                canvas.drawText(weeks[i],dateNumWidth * i + dateNumWidth
                                / 2 - mPaintWeek.measureText(weeks[i] + "") / 2,
                         weekHeight/2.0f + fontHeight / 2.0f,mPaintWeek);
                //Log.i(TAG, "drawCalendarCanvas: i="+i);
            }

            //ArrayList<Event> monthEvent = loadEvents(year,month);
            /*if (monthEvent != null){
                for (Event event : monthEvent){
                    //System.out.println("montEvent:");
                    //System.out.println(event.getTitle());
                    //System.out.println(event.getStartYear());
                    //System.out.println(event.getStartMonth());
                    //System.out.println(event.getStartDayOfMonth());
                }
            }*/


            /*ArrayList<Holiday> holidays;
            Locale locale = getResources().getConfiguration().locale;
            holidays = Data.getInstance().getHolidays(getContext(),locale.equals(Locale.CHINA) ? locale : Locale.TAIWAN);
*/

            //日历绘制
            for (int i = 0; i < weekNum; i++) {
                canvas.drawLine(0,weekHeight + dateNumHeight*i,width,weekHeight +dateNumHeight*i,mPaintLine);
                for (int j = 0; j < dateNum[i].length; j++) {
                    if (i == 0 && dateNum[i][j] > 20) {// 上个月的日期
                        drawCalendarCell(i, j, CalendarState.LAST_MONTH,
                                canvas);
                    } else if ((i == 5 || i == 4) && dateNum[i][j] < 20) {// 下个月的日期
                        drawCalendarCell(i, j, CalendarState.NEXT_MONTH,
                                canvas);
                    } else {// 本月日期
                        if (dateNum[i][j] == CalendarUtil.getCurrentMonthDay()) {// 是否为今天的日期号
                            if (year == CalendarUtil.getYear()
                                    && month == CalendarUtil.getMonth()) {// 是否为今年今月
                                drawCalendarCell(i, j, CalendarState.TODAY,
                                        canvas);
                            }
                            drawCalendarCell(i, j, CalendarState.CURRENT_MONTH,
                                    canvas);
                        } else {
                            drawCalendarCell(i, j, CalendarState.CURRENT_MONTH,
                                    canvas);
                        }
                    }
                }
            }

            //繪製事件
            for (int i = 0;i < weekNum;i++){

                for (int j = 0;j < dateNum[i].length;j++){

                    int eventNum = days[i*7+j].events.size();
                    eventNum = eventNum > maxItems ? maxItems : eventNum;
                    for (int m = 0;m < eventNum;m++){
                        MonthDayEvent event = days[i*7+j].events.get(m);
                        //Log.i("event:",m + event.title);
                        if (event.eventOrder == -1){
                            if (getWordCount(event.title) < 10){
                                mPaintHolidayText.setTextAlign(Paint.Align.CENTER);
                                canvas.drawRoundRect(dateNumWidth*j+dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+dateGapWidth,dateNumWidth*(j+1) - dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+eventHeight-dateGapWidth,5,5,mPaintHoliday);
                                canvas.drawText(event.title,dateNumWidth*j + dateNumWidth/2,weekHeight+dateNumHeight*i+fontHeight*2+eventHeight/2 + eventHeight/4,mPaintHolidayText);

                            }else{
                                mPaintHolidayText.setTextAlign(Paint.Align.LEFT);
                                canvas.drawRoundRect(dateNumWidth*j,weekHeight + dateNumHeight*i+fontHeight*2+dateGapWidth,dateNumWidth*(j+1) - dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+eventHeight-dateGapWidth,5,5,mPaintHoliday);
                                canvas.drawText(event.title.substring(0,12),dateNumWidth*j,weekHeight+dateNumHeight*i+fontHeight*2+eventHeight/2 + eventHeight/4,mPaintHolidayText);

                            }
                        }else if ( days[i*7+j].isSigner && m == 0) {
                            Log.i("Signer:========",event.title);
                        }else {
                            if (Integer.valueOf(event.time) > 0){
                                if (!days[i*7+j].isLongEvent[m]) {
                                    //System.out.println("longEvent:" + event.title);
                                    int longEvent = Integer.valueOf(event.time) < 7 - j ? Integer.valueOf(event.time) : 7 - j;
                                    if (event.startDate == dateNum[i][j]) {
                                        mPaintEventRect.setColor(event.color);
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        canvas.drawRoundRect(dateNumWidth * j + dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + (m) * eventHeight + dateGapWidth, dateNumWidth * (j + longEvent + 1) - dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + (m + 1) * eventHeight - dateGapWidth, 5, 5, mPaintEventRect);
                                        canvas.drawText(event.title, dateNumWidth * j + dateNumWidth * (longEvent + 1) / 2, weekHeight + dateNumHeight * i + fontHeight * 2 + eventHeight/2 + eventHeight/4+ (m) * eventHeight, mPaintEventText);
                                    }
                                }else {
                                    if (j == 0) {
                                        int tmpDayNum = dateNum[i][j] - event.startDate;
                                        mPaintEventRect.setColor(event.color);
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        //System.out.println("LongEventSecShow:" + String.valueOf(dateNum[i][j] - event.startDate));
                                        canvas.drawRoundRect(dateNumWidth * j + dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + (m) * eventHeight + dateGapWidth, dateNumWidth * (j + Integer.valueOf(event.time) - tmpDayNum + 1) - dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + (m + 1) * eventHeight - dateGapWidth, 5, 5, mPaintEventRect);
                                        canvas.drawText(event.title, dateNumWidth * j + dateNumWidth * (j + Integer.valueOf(event.time) - tmpDayNum + 1) / 2, weekHeight + dateNumHeight * i + fontHeight * 2 + eventHeight/2 + eventHeight/4 + (m) * eventHeight, mPaintEventText);
                                    }

                                }
                            }else{
                                //System.out.println("event.time"+ event.time);
                                //System.out.println("event:Allday;"+event.title);
                                if (event.isAllday) {//all day event
                                    if (getWordCount(event.title) < 10) {
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventRect.setColor(event.color);
                                        canvas.drawRoundRect(dateNumWidth * j + dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + (m ) * eventHeight + dateGapWidth, dateNumWidth * (j + 1) - dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + (m+1) * eventHeight - dateGapWidth, 5, 5, mPaintEventRect);
                                        canvas.drawText(event.title, dateNumWidth * j + dateNumWidth / 2, weekHeight + dateNumHeight * i + fontHeight * 2 + (m ) * eventHeight + eventHeight/2 + eventHeight/4, mPaintEventText);
                                    } else {
                                        mPaintEventText.setTextAlign(Paint.Align.LEFT);
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventRect.setColor(event.color);
                                        canvas.drawRoundRect(dateNumWidth * j + dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + m * eventHeight + dateGapWidth, dateNumWidth * (j + 1) - dateGapWidth, weekHeight + dateNumHeight * i + fontHeight * 2 + (m + 1) * eventHeight - dateGapWidth, 5, 5, mPaintEventRect);
                                        canvas.drawText(event.title.substring(0,10), dateNumWidth * j, weekHeight + dateNumHeight * i + fontHeight * 2 + (m) * eventHeight + eventHeight/2 + eventHeight/4, mPaintEventText);

                                    }
                                }else{// not -allDay event
                                    if (getWordCount(event.title) < 10){
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        mPaintEventText.setColor(Color.RED);
                                        canvas.drawText(event.title,dateNumWidth*j + dateNumWidth/2,weekHeight+dateNumHeight*i+fontHeight*2+(m)*eventHeight+eventHeight/2 + eventHeight/4,mPaintEventText);
                                    }else{
                                        mPaintEventText.setTextAlign(Paint.Align.LEFT);
                                        mPaintEventText.setColor(Color.RED);
                                        canvas.drawText(event.title.substring(0,10),dateNumWidth*j,weekHeight+dateNumHeight*i+fontHeight*2+(m)*eventHeight+eventHeight/2 + eventHeight/4,mPaintEventText);

                                    }

                                }
                            }
                        }
                    }
                    //需要显示剩余events numbers
                    if (days[i*7+j].events.size() > maxItems){
                        Path pathIcon = new Path();
                        pathIcon.moveTo(dateNumWidth*(j+1)-fontLunarHeight*3,weekHeight+dateNumHeight*(i+1));
                        pathIcon.lineTo(dateNumWidth*(j+1),weekHeight+dateNumHeight*(i+1)-fontLunarHeight*3);
                        pathIcon.lineTo(dateNumWidth*(j+1),weekHeight+dateNumHeight*(i+1));
                        pathIcon.close();
                        mPaintEventRect.setColor(Color.LTGRAY);
                        canvas.drawPath(pathIcon,mPaintEventRect);
                        canvas.drawText("+" + String.valueOf(days[i*7+j].events.size()-maxItems),dateNumWidth*(j+1)-fontLunarHeight*3/2,weekHeight+dateNumHeight*(i+1)-fontLunarHeight/2,mPainEventNumText);

                    }




                }
            }


        }

        /**
         * 绘画日历表格
         *
         * @param i
         *            横序号
         * @param j
         *            列序号
         * @param state
         *            状态
         * @param canvas
         *            画布
         */
        private void drawCalendarCell(int i, int j, CalendarState state,
                                      Canvas canvas) {
            switch (state) {
                case TODAY:// 今天
                    lunarYear = year;
                    lunarMonth = month;
                    calendarStates[i][j] = CalendarState.TODAY;
                    //mPaintText.setColor(Color.WHITE);
                    if(j==0){
                        mPaintText.setColor(Color.RED);
                    }else{
                        if (j==6){
                            mPaintText.setColor(Color.BLUE);
                        }
                        else{
                            mPaintText.setColor(Color.BLACK);
                        }
                    }
                    canvas.drawRect(dateNumWidth * j ,
                            weekHeight + dateNumHeight * i , dateNumWidth * (j+1) ,weekHeight + dateNumHeight * i + 2 * fontHeight ,
                            mPaintCircle);

                   // Log.i(TAG, "drawCalendarCell: drawRect:i j "+i+j);
                    break;
                case CURRENT_MONTH:// 本月
                    lunarYear = year;
                    lunarMonth = month;
                    calendarStates[i][j] = CalendarState.CURRENT_MONTH;
                    if(j==0){
                        mPaintText.setColor(Color.RED);
                    }else{
                        if (j==6){
                            mPaintText.setColor(Color.BLUE);
                        }
                        else{
                            mPaintText.setColor(Color.BLACK);
                        }
                    }
                    break;
                case LAST_MONTH:// 上月
                    if (month == 1){
                        lunarYear = year - 1;
                        lunarMonth = 12;
                    }else{
                        lunarMonth = month - 1;
                    }
                    calendarStates[i][j] = CalendarState.LAST_MONTH;
                    if(j==0){
                        mPaintText.setColor(Color.rgb(250,128,114));
                    }else{
                        if (j==6){
                            mPaintText.setColor(Color.rgb(61,89,171));
                        }
                        else{
                            mPaintText.setColor(Color.GRAY);
                        }
                    }
                    break;
                case NEXT_MONTH://下月
                    if (month == 12){
                        lunarYear = year + 1;
                        lunarMonth = 1;
                    }else{
                        lunarMonth = month + 1;
                    }
                    calendarStates[i][j] = CalendarState.LAST_MONTH;
                    if(j==0){
                        mPaintText.setColor(Color.rgb(250,128,114)); //淺紅
                    }else{
                        if (j==6){
                            mPaintText.setColor(Color.rgb(61,89,171));//淺藍
                        }
                        else{
                            mPaintText.setColor(Color.GRAY);
                        }
                    }
                    break;
                default:
                    break;
            }


            // 绘画日期
            canvas.drawText(dateNum[i][j] + "", dateNumWidth * j + dateNumWidth
                            / 2 - mPaintText.measureText(dateNum[i][j] + "") / 2,
                    weekHeight + dateNumHeight * i  + fontHeight / 1.0f + fontHeight / 2.0f,
                    mPaintText);
            //绘画农历日期
            lunar = solarToLunar(lunarYear,lunarMonth,dateNum[i][j]);
            canvas.drawText(lunar[1]+"."+lunar[2],dateNumWidth * j + dateNumWidth
                    / 2 - mLunerPaintText.measureText(lunar[1]+"."+lunar[2] + "")/2, weekHeight + dateNumHeight *(i+1) - fontLunarHeight/1.0f,mLunerPaintText);



            //繪畫節假日
          /* for (int k = 0;k<holidays.size();k++){
               Holiday holiday = holidays.get(k);
               String[] date = holiday.getDate().split("-");
               int mYear = Integer.valueOf(date[0]).intValue();
               int mMonth = Integer.valueOf(date[1]).intValue();
               int mDate = Integer.valueOf(date[2]).intValue();

               if (mYear==lunarYear&&mMonth==lunarMonth&&mDate==dateNum[i][j]){
                   if (getWordCount(holiday.getName()) < 10){
                       mPaintHolidayText.setTextAlign(Paint.Align.CENTER);
                       days[i*dateNum[0].length+j+1].isHoliday = true;
                       canvas.drawRoundRect(dateNumWidth*j+dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+dateGapWidth,dateNumWidth*(j+1) - dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+eventHeight-dateGapWidth,5,5,mPaintHoliday);
                       canvas.drawText(holiday.getName(),dateNumWidth*j + dateNumWidth/2,weekHeight+dateNumHeight*i+fontHeight*2+fontLunarHeight+fontLunarHeight/2,mPaintHolidayText);

                   }else{
                       mPaintHolidayText.setTextAlign(Paint.Align.LEFT);
                       days[i*dateNum[0].length+j+1].isHoliday = true;
                       canvas.drawRoundRect(dateNumWidth*j,weekHeight + dateNumHeight*i+fontHeight*2+dateGapWidth,dateNumWidth*(j+1) - dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+eventHeight-dateGapWidth,5,5,mPaintHoliday);
                       canvas.drawText(holiday.getName(),dateNumWidth*j,weekHeight+dateNumHeight*i+fontHeight*2+fontLunarHeight+fontLunarHeight/2,mPaintHolidayText);

                   }
               }
           }*/


            //String eventStartDate = new StringBuilder().append(event.getStartYear()).append("-").append(event.getStartMonth()).append("-").append(event.getStartDayOfMonth()).toString();
            //String eventEndDate = new StringBuilder().append(event.getEndYear()).append("-").append(event.getEndMonth()).append("-").append(event.getEndDayOfMonth()).toString();
            //dayDiff(eventStartDate,eventEndDate,"yyyy-MM-dd")
           //繪製事件
            /*int itemNum = days[i*dateNum[0].length+j+1].isHoliday ? 1 : 0;
            days[i*dateNum[0].length+j+1].eventNum = itemNum;
            String mountDate = new StringBuilder().append(lunarYear).append("-").append(lunarMonth).append("-").append(dateNum[i][j]).toString();
            for (int m = 0;m < events.size();m++){
               Event event = events.get(m);
                String eventStartDate = new StringBuilder().append(event.getStartYear()).append("-").append(event.getStartMonth()).append("-").append(event.getStartDayOfMonth()).toString();
                String eventEndDate = new StringBuilder().append(event.getEndYear()).append("-").append(event.getEndMonth()).append("-").append(event.getEndDayOfMonth()).toString();
                Long eventDays = dayDiff(eventEndDate,eventStartDate,"yyyy-MM-dd");
                if (event.getStartDayOfMonth() == dateNum[i][j]&& event.getStartMonth() == lunarMonth &&event.getStartYear() == lunarYear){
                    days[i*dateNum[0].length+j+1].eventNum++;
                    if (days[i*dateNum[0].length+j+1].eventNum <  maxItems + 1){
                        for (int z = days[i*dateNum[0].length+j+1].eventNum;z < maxItems + 1;z++){//需要显示event Title
                            if (days[i*dateNum[0].length+j+1].isLongEvent[z]){
                                days[i*dateNum[0].length+j+1].eventNum++;
                            }else{
                                if (eventDays > 0){ //long time event
                                    for (int n = 1;n < eventDays + 1;n++){
                                        String myDate = getAfterDay(mountDate,n);
                                        for (int p = 0;p < holidays.size();p++){
                                            Holiday holiday = holidays.get(p);
                                            if (myDate.equals(holiday.getDate())){
                                                itemNum = 1;
                                            }
                                        }
                                    }
                                    if (itemNum == 1) {
                                        for (int y = 1; y < eventDays + 1; y++) {
                                            days[i * dateNum[0].length + j + 1 + y].isHoliday = true;
                                            days[i * dateNum[0].length + j + 1 + y].isLongEvent[days[i * dateNum[0].length + j + 1 + y].eventNum] = true;
                                        }
                                    }
                                    if (days[i*dateNum[0].length+j+1].isHoliday || itemNum == 1){
                                        mPaintEventRect.setColor(event.getColor());
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        canvas.drawRoundRect(dateNumWidth*j+dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+days[i*dateNum[0].length+j+1].eventNum*eventHeight,dateNumWidth*(j+eventDays+1)-dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum+1)*eventHeight,5,5,mPaintEventRect);
                                        canvas.drawText(event.getTitle(),dateNumWidth*j + dateNumWidth*eventDays/2 ,weekHeight+dateNumHeight*i+fontHeight*2+fontLunarHeight+fontLunarHeight/2+days[i*dateNum[0].length+j+1].eventNum*eventHeight,mPaintEventText);
                                    }else{
                                        mPaintEventRect.setColor(event.getColor());
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        canvas.drawRoundRect(dateNumWidth*j+dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+days[i*dateNum[0].length+j+1].eventNum*eventHeight,dateNumWidth*(j+eventDays+1)-dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum+1)*eventHeight,5,5,mPaintEventRect);
                                        canvas.drawText(event.getTitle(),dateNumWidth*j + dateNumWidth*eventDays/2,weekHeight+dateNumHeight*i+fontHeight*2+fontLunarHeight+fontLunarHeight/2+days[i*dateNum[0].length+j+1].eventNum*eventHeight,mPaintEventText);
                                    }
                                    itemNum = 0;
                                }else if (event.isAllDay()){
                                    if (days[i*dateNum[0].length+j+1].isHoliday){
                                        days[i*dateNum[0].length+j+1].eventNum++;
                                    }
                                    if (getWordCount(event.getTitle()) < 10){
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventRect.setColor(event.getColor());
                                        System.out.println("eventNum676:"+ days[i*dateNum[0].length+j+1].eventNum);
                                        canvas.drawRoundRect(dateNumWidth*j+dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum - 1)*eventHeight+dateGapWidth,dateNumWidth*(j+1)-dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum)*eventHeight-dateGapWidth,5,5,mPaintEventRect);
                                        canvas.drawText(event.getTitle(),dateNumWidth*j + dateNumWidth/2,weekHeight+dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum - 1)*eventHeight+fontEventHeight+fontEventHeight/2,mPaintEventText);
                                    }else{
                                        mPaintEventText.setTextAlign(Paint.Align.RIGHT);
                                        mPaintEventText.setColor(Color.WHITE);
                                        mPaintEventRect.setColor(event.getColor());
                                        System.out.println("eventNum682:"+ days[i*dateNum[0].length+j+1].eventNum);
                                        canvas.drawRoundRect(dateNumWidth*j+dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum - 1)*eventHeight+dateGapWidth,dateNumWidth*(j+1)-dateGapWidth,weekHeight + dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum)*eventHeight-dateGapWidth,5,5,mPaintEventRect);
                                        canvas.drawText(event.getTitle(),dateNumWidth*j,weekHeight+dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum - 1)*eventHeight+fontEventHeight+fontEventHeight/2,mPaintEventText);

                                    }
                                }else{
                                    if (getWordCount(event.getTitle()) < 10){
                                        mPaintEventText.setTextAlign(Paint.Align.CENTER);
                                        mPaintEventText.setColor(Color.RED);
                                        System.out.println("shortEvent:"+days[i*dateNum[0].length+j+1].eventNum);
                                        canvas.drawText(event.getTitle(),dateNumWidth*j + dateNumWidth/2,weekHeight+dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum - 1)*eventHeight+fontEventHeight+fontEventHeight/2,mPaintEventText);
                                    }else{
                                        mPaintEventText.setTextAlign(Paint.Align.RIGHT);
                                        mPaintEventText.setColor(Color.RED);
                                        System.out.println("shortEvent:"+days[i*dateNum[0].length+j+1].eventNum);
                                        canvas.drawText(event.getTitle(),dateNumWidth*j,weekHeight+dateNumHeight*i+fontHeight*2+(days[i*dateNum[0].length+j+1].eventNum - 1)*eventHeight+fontEventHeight+fontEventHeight/2,mPaintEventText);
                                    }
                               }
                            }
                        }
                    }else{  //需要显示剩余events numbers
                        Path pathIcon = new Path();
                        pathIcon.moveTo(dateNumWidth*(j+1)-fontLunarHeight*3,weekHeight+dateNumHeight*(i+1));
                        pathIcon.lineTo(dateNumWidth*(j+1),weekHeight+dateNumHeight*(i+1)-fontLunarHeight*3);
                        pathIcon.lineTo(dateNumWidth*(j+1),weekHeight+dateNumHeight*(i+1));
                        pathIcon.close();
                        mPaintEventRect.setColor(Color.LTGRAY);
                        canvas.drawPath(pathIcon,mPaintEventRect);
                        canvas.drawText("+" + String.valueOf(days[i*dateNum[0].length+j+1].eventNum-maxItems),dateNumWidth*(j+1)-fontLunarHeight*3/2,weekHeight+dateNumHeight*(i+1)-fontLunarHeight/2,mPainEventNumText);

                    }
                   }

            }*/
        }
    }



    private class simpleGestureListener extends GestureDetector.SimpleOnGestureListener {

        @Override
        public boolean onDown(MotionEvent e) {

            return true;
        }

        @Override
        public boolean onSingleTapConfirmed(MotionEvent e) {
            //單擊事件
            float touchX = e.getX();
            float touchY = e.getY();
            int dateNumX = (int) (touchX / dateNumWidth);
            int dateNumY = (int) ((touchY-weekHeight) / dateNumHeight);
            onEventClick(dateNumX,dateNumY,true);
            invalidate();
            return true;
        }

        @Override
        public boolean onDoubleTap(MotionEvent e) {
            //雙擊事件
            float touchX = e.getX();
            float touchY = e.getY();
            int dateNumX = (int) (touchX / dateNumWidth);
            int dateNumY = (int) ((touchY-weekHeight) / dateNumHeight);
            onEventClick(dateNumX,dateNumY,true);
            eventDoubleClickListener.onDoubleClick(e);
            invalidate();
            return true;
        }

        @Override
        public void onLongPress(MotionEvent e) {
            float touchX = e.getX();
            float touchY = e.getY();
            int dateNumX = (int) (touchX / dateNumWidth);
            int dateNumY = (int) ((touchY-weekHeight) / dateNumHeight);
            onEventClick(dateNumX,dateNumY,true);
            eventLongPressListener.onLongPress(e);
            invalidate();
            super.onLongPress(e);
        }
    }

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        return gestureDetector.onTouchEvent(event);
    }

    public interface OnDoubleClickListener{
        void onDoubleClick(MotionEvent event);
    }

    public interface OnLongPressListener{
        void onLongPress(MotionEvent event);
    }
}